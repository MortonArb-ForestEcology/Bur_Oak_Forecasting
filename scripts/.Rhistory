bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) > 10
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) < 10
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
#Checking that convergence happened
bud.con <- gelman.diag(bur.out)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) < 1
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
summary(bur.burn)
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) > 1
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) > 3
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) > 6
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
#Checking that convergence happened
bud.con <- gelman.diag(bur.out)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) > 5
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- (cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) >= 5
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
summary(bur.burn)
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- ifelse((cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]) >= 200, 1 ,0)
}
mu[k] <- min(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
#Converting the ooutput into a workable format
bur.out   <- coda.samples (model = bur.model,
variable.names = c("cs"),
n.iter = 7000)
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
#Removing burnin before convergence occurred
burnin = 6900                                ## determine convergence from GBR output
bur.burn <- window(bur.out,start=burnin)  ## remove burn-in
summary(bur.burn)
#converting them into a dataframe
bur.df <- as.data.frame(as.matrix(bur.burn))
View(bur.df)
hierarchical_regression <- "
model{
for(k in 1:n){
cs[k,1] <- ifelse(temp[(k*365)-364] < 5, 0, (temp[(k*365)-364]-5))
for (t in start[k]:end[k]) {
new.tmp[k,t] <- ifelse(temp[t] < 5, 0, (temp[t]-5))
cs[k,(t-((k-1)*365))] <- cs[k, ((t-((k-1)*365)) - 1)] + new.tmp[k,t]
}
mu[k] <- which(cs[k,] >= 200)
y[k] ~ dnorm(mu[k], sPrec)
}
#for(j in 1:nSt){
#   THRESH[j] ~ dnorm(Tprior, aPrec)
#}
#aPrec ~ dgamma(.01, .01)
#Tprior ~ dunif(1, 1000)
sPrec ~ dgamma(.01, .01)
}
"
bur.list <- list(y = burst.list[["yday"]], n = length(burst.list[["yday"]]),
temp = as.numeric(unlist(burst.list[["temp.vec"]])), start = as.numeric(start), end = as.numeric(end),
st = as.numeric(factor(burst.list[["state"]])), nSt = length(unique(burst.list[["state"]])))
#Setting the number of MCMC chains and their parameters
nchain = 3
inits <- list()
rngs <- c(737, 874, 869)
for(i in 1:nchain){
inits[[i]] <- list(.RNG.name = "base::Super-Duper",
.RNG.seed = as.integer(rngs[i])
)
}
#---------------------------------------------------------#
#This section actually runs the model and then provides ways to check the output and clean it
#---------------------------------------------------------#
bur.model   <- jags.model (file = textConnection(hierarchical_regression),
data = bur.list,
inits = inits,
n.chains = 3)
